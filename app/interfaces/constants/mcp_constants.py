"""
MCP Server constants cho Interface layer.
"""
from typing import Dict, List


class MCPServerConstants:
    """MCP Server configuration constants."""
    # Server info
    SERVER_NAME = "RouteMCP_TomTom_CleanArch"
    SERVER_VERSION = "1.0.0"
    DESCRIPTION = "TomTom Route MCP Server with Clean Architecture"
    
    # Default server settings
    DEFAULT_HOST = "192.168.1.3"
    DEFAULT_PORT = 8081
    DEFAULT_TRANSPORT = "streamable-http"
    
    # Protocol settings
    MCP_PROTOCOL_VERSION = "2024-11-05"
    JSONRPC_VERSION = "2.0"
    
    # Tool categories - s·ª≠ d·ª•ng constants t·ª´ MCPToolNames
    ROUTING_TOOLS = ["calculate_route"]
    GEOCODING_TOOLS = ["geocode_address", "get_intersection_position", "get_street_center_position"]
    TRAFFIC_TOOLS = ["get_traffic_condition", "get_route_with_traffic", "analyze_route_traffic"]
    COMPOSITE_TOOLS = ["get_via_route", "check_traffic_between_addresses", "get_detailed_route"]
    DESTINATION_TOOLS = ["save_destination", "list_destinations", "delete_destination", "update_destination"]


class MCPTypeConstants:
    """MCP Type constants for Literal types - s·ª≠ d·ª•ng constants t·ª´ Domain layer."""
    # Import constants from Domain layer ƒë·ªÉ tr√°nh duplicate
    from app.domain.constants.api_constants import TravelModeConstants
    
    # Travel mode values for Literal type - s·ª≠ d·ª•ng constants t·ª´ Domain
    TRAVEL_MODE_CAR = TravelModeConstants.CAR
    TRAVEL_MODE_BICYCLE = TravelModeConstants.BICYCLE
    TRAVEL_MODE_FOOT = TravelModeConstants.FOOT
    
    # Create list for Literal type
    TRAVEL_MODE_VALUES = [TRAVEL_MODE_CAR, TRAVEL_MODE_BICYCLE, TRAVEL_MODE_FOOT]


class MCPToolNames:
    """MCP Tool names constants."""
    CALCULATE_ROUTE = "calculate_route"
    GEOCODE_ADDRESS = "geocode_address"
    GET_ROUTE_WITH_TRAFFIC = "get_route_with_traffic"
    GET_INTERSECTION_POSITION = "get_intersection_position"
    GET_STREET_CENTER_POSITION = "get_street_center_position"
    GET_TRAFFIC_CONDITION = "get_traffic_condition"
    GET_VIA_ROUTE = "get_via_route"
    ANALYZE_ROUTE_TRAFFIC = "analyze_route_traffic"
    CHECK_TRAFFIC_BETWEEN_ADDRESSES = "check_traffic_between_addresses"
    SAVE_DESTINATION = "save_destination"
    LIST_DESTINATIONS = "list_destinations"
    DELETE_DESTINATION = "delete_destination"
    UPDATE_DESTINATION = "update_destination"
    GET_DETAILED_ROUTE = "get_detailed_route"


class MCPToolDescriptions:
    """MCP Tool descriptions."""
    CALCULATE_ROUTE = "T√≠nh to√°n tuy·∫øn ƒë∆∞·ªùng c∆° b·∫£n t·ª´ ƒëi·ªÉm A ƒë·∫øn ƒëi·ªÉm B"
    GEOCODE_ADDRESS = "Chuy·ªÉn ƒë·ªïi ƒë·ªãa ch·ªâ th√†nh t·ªça ƒë·ªô GPS"
    GET_INTERSECTION_POSITION = "T√¨m t·ªça ƒë·ªô giao l·ªô gi·ªØa c√°c ƒë∆∞·ªùng ph·ªë"
    GET_STREET_CENTER_POSITION = "T√¨m t·ªça ƒë·ªô trung t√¢m c·ªßa m·ªôt ƒë∆∞·ªùng ph·ªë"
    GET_TRAFFIC_CONDITION = "L·∫•y th√¥ng tin t√¨nh tr·∫°ng giao th√¥ng t·∫°i m·ªôt v·ªã tr√≠"
    GET_ROUTE_WITH_TRAFFIC = "T√≠nh to√°n tuy·∫øn ƒë∆∞·ªùng c√≥ k√®m th√¥ng tin giao th√¥ng"
    GET_VIA_ROUTE = "T√≠nh to√°n tuy·∫øn ƒë∆∞·ªùng qua ƒëi·ªÉm trung gian A ‚Üí B ‚Üí C"
    ANALYZE_ROUTE_TRAFFIC = "Ph√¢n t√≠ch t√¨nh tr·∫°ng giao th√¥ng tr√™n tuy·∫øn ƒë∆∞·ªùng"
    CHECK_TRAFFIC_BETWEEN_ADDRESSES = "Ki·ªÉm tra t√¨nh tr·∫°ng giao th√¥ng gi·ªØa c√°c ƒë·ªãa ch·ªâ"
    GET_DETAILED_ROUTE = "T√≠nh to√°n tuy·∫øn ƒë∆∞·ªùng chi ti·∫øt v√† cung c·∫•p ch·ªâ d·∫´n t·ª´ng b∆∞·ªõc di chuy·ªÉn gi·ªØa hai ƒë·ªãa ch·ªâ, bao g·ªìm h∆∞·ªõng d·∫´n l√°i xe, kho·∫£ng c√°ch, th·ªùi gian v√† th√¥ng tin giao th√¥ng"
    SAVE_DESTINATION = "L∆∞u ƒëi·ªÉm ƒë·∫øn v·ªõi geocoding t·ª± ƒë·ªông"
    LIST_DESTINATIONS = "Li·ªát k√™ t·∫•t c·∫£ ƒëi·ªÉm ƒë·∫øn ƒë√£ l∆∞u"
    DELETE_DESTINATION = "X√≥a ƒëi·ªÉm ƒë·∫øn theo ID"
    UPDATE_DESTINATION = "C·∫≠p nh·∫≠t th√¥ng tin ƒëi·ªÉm ƒë·∫øn"


class MCPErrorMessages:
    """MCP Error messages."""
    # Server errors
    SERVER_STARTUP_ERROR = "‚ùå Error starting server: {error}"
    CONFIG_ERROR = "‚ùå Configuration error: {error}"
    API_KEY_MISSING = "‚ùå TOMTOM_API_KEY environment variable is required!"
    
    # Tool errors
    TOOL_EXECUTION_ERROR = "Tool execution failed: {error}"
    INVALID_PARAMETERS = "Invalid parameters: {error}"
    VALIDATION_ERROR = "Validation error: {error}"
    
    # Request errors
    REQUEST_VALIDATION_FAILED = "Request validation failed: {error}"
    UNSUPPORTED_METHOD = "Unsupported method: {method}"
    MALFORMED_REQUEST = "Malformed request: {error}"


class MCPToolErrorMessages:
    """MCP Tool specific error messages."""
    # Calculate route errors
    INVALID_COORDINATES = "Invalid coordinates: {error}"
    
    # Geocoding errors
    GEOCODING_FAILED = "Geocoding failed: {error}"
    
    # Route errors
    ROUTE_WITH_TRAFFIC_FAILED = "Route with traffic calculation failed: {error}"
    VIA_ROUTE_FAILED = "Via route calculation failed: {error}"
    GET_DETAILED_ROUTE_FAILED = "Get detailed route failed: {error}"
    
    # Position lookup errors
    INTERSECTION_LOOKUP_FAILED = "Intersection lookup failed: {error}"
    STREET_CENTER_LOOKUP_FAILED = "Street center lookup failed: {error}"
    
    # Traffic errors
    TRAFFIC_CONDITION_FAILED = "Traffic condition lookup failed: {error}"
    TRAFFIC_ANALYSIS_FAILED = "Traffic analysis failed: {error}"
    ADDRESS_TRAFFIC_CHECK_FAILED = "Address traffic check failed: {error}"
    
    # Destination errors
    SAVE_DESTINATION_FAILED = "Save destination failed: {error}"
    LIST_DESTINATIONS_FAILED = "List destinations failed: {error}"
    DELETE_DESTINATION_FAILED = "Delete destination failed: {error}"
    UPDATE_DESTINATION_FAILED = "Update destination failed: {error}"


class MCPSuccessMessages:
    """MCP Success messages."""
    SERVER_STARTED = "üöÄ TomTom MCP Server started successfully"
    SERVER_STOPPED = "üëã Server stopped by user"
    API_KEY_CONFIGURED = "‚úÖ TomTom API key configured"
    TOOL_EXECUTED = "‚úÖ Tool executed successfully: {tool_name}"


class MCPLogMessages:
    """MCP Log messages."""
    # Startup messages
    STARTUP_BANNER = """
üöÄ TomTom MCP Server - Clean Architecture
{"=" * 60}
üìã Architecture: Clean Architecture (Hexagonal)
üèóÔ∏è  Pattern: Ports & Adapters
üîå Dependency Injection: Container pattern
üõ†Ô∏è  Available tools: {tool_count}
{"=" * 60}
üåê Transport: {transport}
üì° Endpoint: http://{host}:{port}
{"=" * 60}
"""
    
    TOOL_LIST = """üõ†Ô∏è  Available tools:
   ‚Ä¢ calculate_route - T√≠nh to√°n tuy·∫øn ƒë∆∞·ªùng c∆° b·∫£n
   ‚Ä¢ geocode_address - Chuy·ªÉn ƒë·ªãa ch·ªâ th√†nh t·ªça ƒë·ªô
   ‚Ä¢ get_intersection_position - T√¨m t·ªça ƒë·ªô giao l·ªô
   ‚Ä¢ get_street_center_position - T√¨m trung t√¢m ƒë∆∞·ªùng ph·ªë
   ‚Ä¢ get_traffic_condition - L·∫•y th√¥ng tin giao th√¥ng
   ‚Ä¢ get_route_with_traffic - Tuy·∫øn ƒë∆∞·ªùng c√≥ traffic
   ‚Ä¢ get_via_route - Tuy·∫øn ƒë∆∞·ªùng qua ƒëi·ªÉm trung gian
   ‚Ä¢ analyze_route_traffic - Ph√¢n t√≠ch traffic tuy·∫øn ƒë∆∞·ªùng
   ‚Ä¢ check_traffic_between_addresses - Ki·ªÉm tra traffic gi·ªØa ƒë·ªãa ch·ªâ"""
    
    # API key setup instructions
    API_KEY_SETUP = """Please set your TomTom API key:
  Windows: $env:TOMTOM_API_KEY='your_api_key_here'
  Linux/Mac: export TOMTOM_API_KEY='your_api_key_here'"""


class MCPDetailedRouteLogMessages:
    """MCP Detailed Route Log messages."""
    # Response logging
    SERVER_RESPONSE_HEADER = "\nüîç MCP Server Response for get_detailed_route:"
    DISTANCE_LOG = "üìè Distance: {distance:,} meters"
    DURATION_LOG = "‚è±Ô∏è Duration: {duration:,} seconds"
    GUIDANCE_INSTRUCTIONS_LOG = "üß≠ Guidance instructions: {count}"
    ROUTE_LEGS_LOG = "ü¶µ Route legs: {count}"
    ORIGIN_LOG = "üìç Origin: {address}"
    DESTINATION_LOG = "üìç Destination: {address}"
    
    # Guidance instructions logging
    GUIDANCE_HEADER = "\nüß≠ First 3 Guidance Instructions:"
    GUIDANCE_STEP = "  {step}. {instruction}"
    GUIDANCE_DISTANCE_DURATION = "     Distance: {distance}m, Duration: {duration}s"
    GUIDANCE_MANEUVER = "     Maneuver: {maneuver}"
    GUIDANCE_ROAD = "     Road: {road_name}"
    GUIDANCE_POINT = "     Point: ({lat}, {lon})"
    
    # Final response logging
    FINAL_RESPONSE_HEADER = "\nüì§ Final MCP Response:"
    SUMMARY_LOG = "   Summary: {summary}"
    ROUTE_INSTRUCTIONS_COUNT = "   Route instructions count: {count}"
    ROUTE_LEGS_COUNT = "   Route legs count: {count}"
    TRAFFIC_SECTIONS_COUNT = "   Traffic sections count: {count}"
    
    # Route instructions logging
    ROUTE_INSTRUCTIONS_HEADER = "\nüõ£Ô∏è First 3 Route Instructions:"
    ROUTE_STEP = "   Step {step}: {instruction}"
    ROUTE_DISTANCE_DURATION = "   Distance: {distance}m, Duration: {duration}s"
    ROUTE_MANEUVER = "   Maneuver: {maneuver}"
    ROUTE_ROAD = "   Road: {road_name}"
    
    # Error logging
    ERROR_HEADER = "\n‚ùå Error in get_detailed_route: {error}"
